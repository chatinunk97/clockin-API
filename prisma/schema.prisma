// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  profileImage         String?
  employeeId           String
  firstName            String
  lastName             String
  email                String             @unique
  password             String
  mobile               String             @unique
  position             PositionType       @default(USER)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  userType             UserRole           @default(FULLTIME)
  isActive             Boolean            @default(true)
  checkLocation        Boolean            @default(true)
  companyProfileId     Int
  companyProfile       CompanyProfile     @relation(fields: [companyProfileId], references: [id])
  userLeave            UserLeave[]
  userRelationshipBoss UserRelationship[] @relation("userBoss")
  userRelationshipUser UserRelationship[] @relation("user")
  clock                Clock[]
  flexiblaTime         FlexiblaTime[]
  requestOT            requestOT[]
}

enum PositionType {
  SUPERADMIN
  ADMIN
  USER
  HR
  MANAGER
}

enum UserRole {
  FULLTIME
  PARTTIME
}

model UserRelationship {
  id         Int  @id @default(autoincrement())
  userBossId Int
  userBoss   User @relation("userBoss", fields: [userBossId], references: [id])
  userId     Int
  user       User @relation("user", fields: [userId], references: [id])
}

model Package {
  id             Int              @id @default(autoincrement())
  price          Decimal          @db.Decimal(10, 2)
  userCount      Int
  companyProfile CompanyProfile[]
}

model CompanyProfile {
  id               Int               @id @default(autoincrement())
  companyName      String
  packageId        Int
  package          Package           @relation(fields: [packageId], references: [id])
  isActive         Boolean           @default(true)
  user             User[]
  payment          Payment[]
  leaveProfile     LeaveProfile[]
  timeProfile      TimeProfile[]
  companyLocations CompanyLocation[]
}

model CompanyLocation {
  id               Int            @id @default(autoincrement())
  latitudeCompany  Float
  longitudeCompany Float
  companyProfileId Int
  companyProfile   CompanyProfile @relation(fields: [companyProfileId], references: [id])
}

model Payment {
  id               Int            @id @default(autoincrement())
  companyProfileId Int
  companyProfile   CompanyProfile @relation(fields: [companyProfileId], references: [id])
  paySlip          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
}

model LeaveProfile {
  id               Int            @id @default(autoincrement())
  companyProfileId Int
  companyProfile   CompanyProfile @relation(fields: [companyProfileId], references: [id])
  leaveName        String
  userLeave        UserLeave[]
}

model RequestLeave {
  id            Int          @id @default(autoincrement())
  userLeaveId   Int
  userLeave     UserLeave    @relation(fields: [userLeaveId], references: [id])
  startDate     DateTime
  endDate       DateTime
  halfDate      Boolean      @default(false)
  statusRequest StateRequest @default(PENDING)
  messageLeave  String
}

enum StateRequest {
  PENDING
  ACCEPT
  REJECT
}

model UserLeave {
  id             Int            @id @default(autoincrement())
  userId         Int
  user           User           @relation(fields: [userId], references: [id])
  leaveProfiieId Int
  leaveProfile   LeaveProfile   @relation(fields: [leaveProfiieId], references: [id])
  requestLeave   RequestLeave[]
  dateAmount     Int            @default(0)
}

model Clock {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  clockInTime       DateTime      @default(now())
  clockOutTime      DateTime?
  latitudeClockIn   Float
  longitudeClockIn  Float
  latitudeClockOut  Float?
  longitudeClockOut Float?
  statusClockIn     statusClockIn @default(ONTIME)
  reasonLate        String?
  requestOT         requestOT[]
}

enum statusClockIn {
  ONTIME
  LATE
}

model FlexiblaTime {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  date          DateTime
  timeProfileId Int
  timeProfile   TimeProfile @relation(fields: [timeProfileId], references: [id])
}

model TimeProfile {
  id               Int            @id @default(autoincrement())
  companyProfileId Int
  companyProfile   CompanyProfile @relation(fields: [companyProfileId], references: [id])
  start            DateTime       @db.Time()
  end              DateTime       @db.Time()
  typeTime         Typetime
  flexiblaTime     FlexiblaTime[]
}

enum Typetime {
  DEFAULT
  FIRSTHALF
  SECONDHAFT
  NOTSPECIFIED
}

model requestOT {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  clockId   Int
  clock     Clock    @relation(fields: [clockId], references: [id])
  startTime DateTime
  endTime   DateTime
  statusOT  stateOT  @default(PENDING)
  messageOT String
}

enum stateOT {
  PENDING
  ACCEPT
  REJECT
}
